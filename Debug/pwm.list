
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016b0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001874  08001874  00011874  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001884  08001884  00011884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800188c  0800188c  0001188c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001890  08001890  00011890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000005c  2000000c  080018a0  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000068  080018a0  00020068  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010f70  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002156  00000000  00000000  00030fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000532d  00000000  00000000  00033102  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000780  00000000  00000000  00038430  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000009b8  00000000  00000000  00038bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000042d1  00000000  00000000  00039568  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000345c  00000000  00000000  0003d839  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00040c95  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001548  00000000  00000000  00040d14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800185c 	.word	0x0800185c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800185c 	.word	0x0800185c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 f8a8 	bl	8000680 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000540:	f000 f85e 	bl	8000600 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 f82f 	bl	80005dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f001 f866 	bl	8001654 <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff fff6 	bl	80005a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005bc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005be:	bf1c      	itt	ne
 80005c0:	4b05      	ldrne	r3, [pc, #20]	; (80005d8 <HAL_Delay+0x24>)
 80005c2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005c6:	bf18      	it	ne
 80005c8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ca:	f7ff ffed 	bl	80005a8 <HAL_GetTick>
 80005ce:	1b40      	subs	r0, r0, r5
 80005d0:	4284      	cmp	r4, r0
 80005d2:	d8fa      	bhi.n	80005ca <HAL_Delay+0x16>
  {
  }
}
 80005d4:	bd38      	pop	{r3, r4, r5, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005de:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	0c1b      	lsrs	r3, r3, #16
 80005e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005ec:	0200      	lsls	r0, r0, #8
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005f8:	60d3      	str	r3, [r2, #12]
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000602:	b530      	push	{r4, r5, lr}
 8000604:	68dc      	ldr	r4, [r3, #12]
 8000606:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000610:	2b04      	cmp	r3, #4
 8000612:	bf28      	it	cs
 8000614:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000616:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	f04f 0501 	mov.w	r5, #1
 800061c:	fa05 f303 	lsl.w	r3, r5, r3
 8000620:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000624:	bf8c      	ite	hi
 8000626:	3c03      	subhi	r4, #3
 8000628:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062a:	4019      	ands	r1, r3
 800062c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062e:	fa05 f404 	lsl.w	r4, r5, r4
 8000632:	3c01      	subs	r4, #1
 8000634:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000636:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000638:	ea42 0201 	orr.w	r2, r2, r1
 800063c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	bfaf      	iteee	ge
 8000642:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	f000 000f 	andlt.w	r0, r0, #15
 800064a:	4b06      	ldrlt	r3, [pc, #24]	; (8000664 <HAL_NVIC_SetPriority+0x64>)
 800064c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	bfa5      	ittet	ge
 8000650:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000654:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	e000ed14 	.word	0xe000ed14

08000668 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000668:	0942      	lsrs	r2, r0, #5
 800066a:	2301      	movs	r3, #1
 800066c:	f000 001f 	and.w	r0, r0, #31
 8000670:	fa03 f000 	lsl.w	r0, r3, r0
 8000674:	4b01      	ldr	r3, [pc, #4]	; (800067c <HAL_NVIC_EnableIRQ+0x14>)
 8000676:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800067a:	4770      	bx	lr
 800067c:	e000e100 	.word	0xe000e100

08000680 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000680:	3801      	subs	r0, #1
 8000682:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000686:	d20a      	bcs.n	800069e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000688:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	21f0      	movs	r1, #240	; 0xf0
 8000690:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000694:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000696:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000698:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800069e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e010 	.word	0xe000e010
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006ae:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006b0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006b2:	bf0c      	ite	eq
 80006b4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006b8:	f022 0204 	bicne.w	r2, r2, #4
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	4770      	bx	lr
 80006c0:	e000e010 	.word	0xe000e010

080006c4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80006c4:	4770      	bx	lr

080006c6 <HAL_SYSTICK_IRQHandler>:
{
 80006c6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80006c8:	f7ff fffc 	bl	80006c4 <HAL_SYSTICK_Callback>
 80006cc:	bd08      	pop	{r3, pc}
	...

080006d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006d4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006d6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d8:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800087c <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006dc:	4a65      	ldr	r2, [pc, #404]	; (8000874 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006de:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000880 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006e2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006e4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006e6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006ea:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80006ec:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006f0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80006f4:	45b6      	cmp	lr, r6
 80006f6:	f040 80aa 	bne.w	800084e <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006fa:	684c      	ldr	r4, [r1, #4]
 80006fc:	f024 0710 	bic.w	r7, r4, #16
 8000700:	2f02      	cmp	r7, #2
 8000702:	d116      	bne.n	8000732 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000704:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000708:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800070c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000710:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000714:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000718:	f04f 0c0f 	mov.w	ip, #15
 800071c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000720:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000724:	690d      	ldr	r5, [r1, #16]
 8000726:	fa05 f50b 	lsl.w	r5, r5, fp
 800072a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800072e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000732:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000736:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000738:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800073c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000740:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000742:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000746:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800074a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800074e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000750:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000754:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000756:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800075a:	d811      	bhi.n	8000780 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800075c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800075e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000762:	68cf      	ldr	r7, [r1, #12]
 8000764:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000768:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800076c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800076e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000770:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000774:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000778:	409f      	lsls	r7, r3
 800077a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800077e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000780:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000782:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000784:	688f      	ldr	r7, [r1, #8]
 8000786:	fa07 f70a 	lsl.w	r7, r7, sl
 800078a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800078c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800078e:	00e5      	lsls	r5, r4, #3
 8000790:	d55d      	bpl.n	800084e <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000792:	f04f 0b00 	mov.w	fp, #0
 8000796:	f8cd b00c 	str.w	fp, [sp, #12]
 800079a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079e:	4d36      	ldr	r5, [pc, #216]	; (8000878 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80007a4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80007a8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80007ac:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80007b0:	9703      	str	r7, [sp, #12]
 80007b2:	9f03      	ldr	r7, [sp, #12]
 80007b4:	f023 0703 	bic.w	r7, r3, #3
 80007b8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80007bc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007c0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007c4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007cc:	f04f 0e0f 	mov.w	lr, #15
 80007d0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007d4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007d6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007da:	d03f      	beq.n	800085c <HAL_GPIO_Init+0x18c>
 80007dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e0:	42a8      	cmp	r0, r5
 80007e2:	d03d      	beq.n	8000860 <HAL_GPIO_Init+0x190>
 80007e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007e8:	42a8      	cmp	r0, r5
 80007ea:	d03b      	beq.n	8000864 <HAL_GPIO_Init+0x194>
 80007ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f0:	42a8      	cmp	r0, r5
 80007f2:	d039      	beq.n	8000868 <HAL_GPIO_Init+0x198>
 80007f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80007f8:	42a8      	cmp	r0, r5
 80007fa:	d037      	beq.n	800086c <HAL_GPIO_Init+0x19c>
 80007fc:	4548      	cmp	r0, r9
 80007fe:	d037      	beq.n	8000870 <HAL_GPIO_Init+0x1a0>
 8000800:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000804:	42a8      	cmp	r0, r5
 8000806:	bf14      	ite	ne
 8000808:	2507      	movne	r5, #7
 800080a:	2506      	moveq	r5, #6
 800080c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000810:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000814:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000816:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000818:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800081a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800081e:	bf0c      	ite	eq
 8000820:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000822:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000824:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000826:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000828:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800082c:	bf0c      	ite	eq
 800082e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000830:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000832:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000834:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000836:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800083a:	bf0c      	ite	eq
 800083c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800083e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000840:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000842:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000844:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000846:	bf54      	ite	pl
 8000848:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800084a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800084c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800084e:	3301      	adds	r3, #1
 8000850:	2b10      	cmp	r3, #16
 8000852:	f47f af48 	bne.w	80006e6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000856:	b005      	add	sp, #20
 8000858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800085c:	465d      	mov	r5, fp
 800085e:	e7d5      	b.n	800080c <HAL_GPIO_Init+0x13c>
 8000860:	2501      	movs	r5, #1
 8000862:	e7d3      	b.n	800080c <HAL_GPIO_Init+0x13c>
 8000864:	2502      	movs	r5, #2
 8000866:	e7d1      	b.n	800080c <HAL_GPIO_Init+0x13c>
 8000868:	2503      	movs	r5, #3
 800086a:	e7cf      	b.n	800080c <HAL_GPIO_Init+0x13c>
 800086c:	2504      	movs	r5, #4
 800086e:	e7cd      	b.n	800080c <HAL_GPIO_Init+0x13c>
 8000870:	2505      	movs	r5, #5
 8000872:	e7cb      	b.n	800080c <HAL_GPIO_Init+0x13c>
 8000874:	40013c00 	.word	0x40013c00
 8000878:	40020000 	.word	0x40020000
 800087c:	40023800 	.word	0x40023800
 8000880:	40021400 	.word	0x40021400

08000884 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000884:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800088c:	4c18      	ldr	r4, [pc, #96]	; (80008f0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000890:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000894:	641a      	str	r2, [r3, #64]	; 0x40
 8000896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_PWREx_EnableOverDrive+0x70>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008a6:	f7ff fe7f 	bl	80005a8 <HAL_GetTick>
 80008aa:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80008ac:	6863      	ldr	r3, [r4, #4]
 80008ae:	03da      	lsls	r2, r3, #15
 80008b0:	d50b      	bpl.n	80008ca <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008b4:	4c0e      	ldr	r4, [pc, #56]	; (80008f0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008b6:	2201      	movs	r2, #1
 80008b8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008ba:	f7ff fe75 	bl	80005a8 <HAL_GetTick>
 80008be:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008c0:	6863      	ldr	r3, [r4, #4]
 80008c2:	039b      	lsls	r3, r3, #14
 80008c4:	d50a      	bpl.n	80008dc <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80008c6:	2000      	movs	r0, #0
 80008c8:	e006      	b.n	80008d8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008ca:	f7ff fe6d 	bl	80005a8 <HAL_GetTick>
 80008ce:	1b40      	subs	r0, r0, r5
 80008d0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008d4:	d9ea      	bls.n	80008ac <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80008d6:	2003      	movs	r0, #3
}
 80008d8:	b003      	add	sp, #12
 80008da:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008dc:	f7ff fe64 	bl	80005a8 <HAL_GetTick>
 80008e0:	1b40      	subs	r0, r0, r5
 80008e2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008e6:	d9eb      	bls.n	80008c0 <HAL_PWREx_EnableOverDrive+0x3c>
 80008e8:	e7f5      	b.n	80008d6 <HAL_PWREx_EnableOverDrive+0x52>
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40007000 	.word	0x40007000
 80008f4:	420e0040 	.word	0x420e0040
 80008f8:	420e0044 	.word	0x420e0044

080008fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80008fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000900:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000902:	4604      	mov	r4, r0
 8000904:	b910      	cbnz	r0, 800090c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000906:	2001      	movs	r0, #1
 8000908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800090c:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <HAL_RCC_ClockConfig+0x124>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	f002 020f 	and.w	r2, r2, #15
 8000914:	428a      	cmp	r2, r1
 8000916:	d328      	bcc.n	800096a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000918:	6821      	ldr	r1, [r4, #0]
 800091a:	078f      	lsls	r7, r1, #30
 800091c:	d42d      	bmi.n	800097a <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800091e:	07c8      	lsls	r0, r1, #31
 8000920:	d440      	bmi.n	80009a4 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000922:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <HAL_RCC_ClockConfig+0x124>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	f002 020f 	and.w	r2, r2, #15
 800092a:	4295      	cmp	r5, r2
 800092c:	d366      	bcc.n	80009fc <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800092e:	6822      	ldr	r2, [r4, #0]
 8000930:	0751      	lsls	r1, r2, #29
 8000932:	d46c      	bmi.n	8000a0e <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000934:	0713      	lsls	r3, r2, #28
 8000936:	d507      	bpl.n	8000948 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000938:	4a3a      	ldr	r2, [pc, #232]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 800093a:	6921      	ldr	r1, [r4, #16]
 800093c:	6893      	ldr	r3, [r2, #8]
 800093e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000942:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000946:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000948:	f000 f878 	bl	8000a3c <HAL_RCC_GetSysClockFreq>
 800094c:	4b35      	ldr	r3, [pc, #212]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 800094e:	4a36      	ldr	r2, [pc, #216]	; (8000a28 <HAL_RCC_ClockConfig+0x12c>)
 8000950:	689b      	ldr	r3, [r3, #8]
 8000952:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000956:	5cd3      	ldrb	r3, [r2, r3]
 8000958:	40d8      	lsrs	r0, r3
 800095a:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <HAL_RCC_ClockConfig+0x130>)
 800095c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff fdd8 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8000964:	2000      	movs	r0, #0
 8000966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800096a:	b2ca      	uxtb	r2, r1
 800096c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f003 030f 	and.w	r3, r3, #15
 8000974:	4299      	cmp	r1, r3
 8000976:	d1c6      	bne.n	8000906 <HAL_RCC_ClockConfig+0xa>
 8000978:	e7ce      	b.n	8000918 <HAL_RCC_ClockConfig+0x1c>
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800097c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000980:	bf1e      	ittt	ne
 8000982:	689a      	ldrne	r2, [r3, #8]
 8000984:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000988:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800098a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800098c:	bf42      	ittt	mi
 800098e:	689a      	ldrmi	r2, [r3, #8]
 8000990:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000994:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	68a0      	ldr	r0, [r4, #8]
 800099a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800099e:	4302      	orrs	r2, r0
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	e7bc      	b.n	800091e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009a4:	6862      	ldr	r2, [r4, #4]
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 80009a8:	2a01      	cmp	r2, #1
 80009aa:	d11d      	bne.n	80009e8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009b2:	d0a8      	beq.n	8000906 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009b4:	4e1b      	ldr	r6, [pc, #108]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 80009b6:	68b3      	ldr	r3, [r6, #8]
 80009b8:	f023 0303 	bic.w	r3, r3, #3
 80009bc:	4313      	orrs	r3, r2
 80009be:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80009c0:	f7ff fdf2 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009c4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80009c8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80009ca:	68b3      	ldr	r3, [r6, #8]
 80009cc:	6862      	ldr	r2, [r4, #4]
 80009ce:	f003 030c 	and.w	r3, r3, #12
 80009d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80009d6:	d0a4      	beq.n	8000922 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009d8:	f7ff fde6 	bl	80005a8 <HAL_GetTick>
 80009dc:	1bc0      	subs	r0, r0, r7
 80009de:	4540      	cmp	r0, r8
 80009e0:	d9f3      	bls.n	80009ca <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80009e2:	2003      	movs	r0, #3
}
 80009e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009e8:	1e91      	subs	r1, r2, #2
 80009ea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009ec:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80009ee:	d802      	bhi.n	80009f6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80009f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80009f4:	e7dd      	b.n	80009b2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f6:	f013 0f02 	tst.w	r3, #2
 80009fa:	e7da      	b.n	80009b2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009fc:	b2ea      	uxtb	r2, r5
 80009fe:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f003 030f 	and.w	r3, r3, #15
 8000a06:	429d      	cmp	r5, r3
 8000a08:	f47f af7d 	bne.w	8000906 <HAL_RCC_ClockConfig+0xa>
 8000a0c:	e78f      	b.n	800092e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000a0e:	4905      	ldr	r1, [pc, #20]	; (8000a24 <HAL_RCC_ClockConfig+0x128>)
 8000a10:	68e0      	ldr	r0, [r4, #12]
 8000a12:	688b      	ldr	r3, [r1, #8]
 8000a14:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000a18:	4303      	orrs	r3, r0
 8000a1a:	608b      	str	r3, [r1, #8]
 8000a1c:	e78a      	b.n	8000934 <HAL_RCC_ClockConfig+0x38>
 8000a1e:	bf00      	nop
 8000a20:	40023c00 	.word	0x40023c00
 8000a24:	40023800 	.word	0x40023800
 8000a28:	08001874 	.word	0x08001874
 8000a2c:	20000008 	.word	0x20000008

08000a30 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000a30:	4b01      	ldr	r3, [pc, #4]	; (8000a38 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a32:	6818      	ldr	r0, [r3, #0]
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000008 	.word	0x20000008

08000a3c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a3c:	4920      	ldr	r1, [pc, #128]	; (8000ac0 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000a3e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a40:	688b      	ldr	r3, [r1, #8]
 8000a42:	f003 030c 	and.w	r3, r3, #12
 8000a46:	2b08      	cmp	r3, #8
 8000a48:	d007      	beq.n	8000a5a <HAL_RCC_GetSysClockFreq+0x1e>
 8000a4a:	2b0c      	cmp	r3, #12
 8000a4c:	d020      	beq.n	8000a90 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000a4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <HAL_RCC_GetSysClockFreq+0x88>)
 8000a50:	481d      	ldr	r0, [pc, #116]	; (8000ac8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	bf18      	it	ne
 8000a56:	4610      	movne	r0, r2
 8000a58:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a5a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a5c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a5e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a60:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a64:	bf14      	ite	ne
 8000a66:	4818      	ldrne	r0, [pc, #96]	; (8000ac8 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a68:	4816      	ldreq	r0, [pc, #88]	; (8000ac4 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a6a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000a6e:	bf18      	it	ne
 8000a70:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a72:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a76:	fba1 0100 	umull	r0, r1, r1, r0
 8000a7a:	f7ff fbc3 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_RCC_GetSysClockFreq+0x84>)
 8000a80:	685b      	ldr	r3, [r3, #4]
 8000a82:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000a86:	3301      	adds	r3, #1
 8000a88:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000a8a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a8e:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a90:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a92:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a94:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000a96:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a9a:	bf14      	ite	ne
 8000a9c:	480a      	ldrne	r0, [pc, #40]	; (8000ac8 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000a9e:	4809      	ldreq	r0, [pc, #36]	; (8000ac4 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000aa0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000aa4:	bf18      	it	ne
 8000aa6:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000aa8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000aac:	fba1 0100 	umull	r0, r1, r1, r0
 8000ab0:	f7ff fba8 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000ab4:	4b02      	ldr	r3, [pc, #8]	; (8000ac0 <HAL_RCC_GetSysClockFreq+0x84>)
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000abc:	e7e5      	b.n	8000a8a <HAL_RCC_GetSysClockFreq+0x4e>
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	00f42400 	.word	0x00f42400
 8000ac8:	007a1200 	.word	0x007a1200

08000acc <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000acc:	6803      	ldr	r3, [r0, #0]
{
 8000ace:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad2:	07df      	lsls	r7, r3, #31
{
 8000ad4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ad6:	d410      	bmi.n	8000afa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ad8:	6823      	ldr	r3, [r4, #0]
 8000ada:	079e      	lsls	r6, r3, #30
 8000adc:	d467      	bmi.n	8000bae <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ade:	6823      	ldr	r3, [r4, #0]
 8000ae0:	071a      	lsls	r2, r3, #28
 8000ae2:	f100 80b2 	bmi.w	8000c4a <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ae6:	6823      	ldr	r3, [r4, #0]
 8000ae8:	075b      	lsls	r3, r3, #29
 8000aea:	f100 80d0 	bmi.w	8000c8e <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aee:	69a2      	ldr	r2, [r4, #24]
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	f040 8139 	bne.w	8000d68 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000af6:	2000      	movs	r0, #0
 8000af8:	e01e      	b.n	8000b38 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000afa:	4b97      	ldr	r3, [pc, #604]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	f002 020c 	and.w	r2, r2, #12
 8000b02:	2a04      	cmp	r2, #4
 8000b04:	d010      	beq.n	8000b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000b0c:	2a08      	cmp	r2, #8
 8000b0e:	d102      	bne.n	8000b16 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	025d      	lsls	r5, r3, #9
 8000b14:	d408      	bmi.n	8000b28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b16:	4b90      	ldr	r3, [pc, #576]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
 8000b18:	689a      	ldr	r2, [r3, #8]
 8000b1a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000b1e:	2a0c      	cmp	r2, #12
 8000b20:	d10d      	bne.n	8000b3e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b22:	685a      	ldr	r2, [r3, #4]
 8000b24:	0250      	lsls	r0, r2, #9
 8000b26:	d50a      	bpl.n	8000b3e <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b28:	4b8b      	ldr	r3, [pc, #556]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	0399      	lsls	r1, r3, #14
 8000b2e:	d5d3      	bpl.n	8000ad8 <HAL_RCC_OscConfig+0xc>
 8000b30:	6863      	ldr	r3, [r4, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1d0      	bne.n	8000ad8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000b36:	2001      	movs	r0, #1
}
 8000b38:	b002      	add	sp, #8
 8000b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b3e:	6862      	ldr	r2, [r4, #4]
 8000b40:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000b44:	d111      	bne.n	8000b6a <HAL_RCC_OscConfig+0x9e>
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b4e:	f7ff fd2b 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b52:	4d81      	ldr	r5, [pc, #516]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000b54:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b56:	682b      	ldr	r3, [r5, #0]
 8000b58:	039a      	lsls	r2, r3, #14
 8000b5a:	d4bd      	bmi.n	8000ad8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b5c:	f7ff fd24 	bl	80005a8 <HAL_GetTick>
 8000b60:	1b80      	subs	r0, r0, r6
 8000b62:	2864      	cmp	r0, #100	; 0x64
 8000b64:	d9f7      	bls.n	8000b56 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000b66:	2003      	movs	r0, #3
 8000b68:	e7e6      	b.n	8000b38 <HAL_RCC_OscConfig+0x6c>
 8000b6a:	4d7b      	ldr	r5, [pc, #492]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000b70:	682b      	ldr	r3, [r5, #0]
 8000b72:	d107      	bne.n	8000b84 <HAL_RCC_OscConfig+0xb8>
 8000b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b78:	602b      	str	r3, [r5, #0]
 8000b7a:	682b      	ldr	r3, [r5, #0]
 8000b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b80:	602b      	str	r3, [r5, #0]
 8000b82:	e7e4      	b.n	8000b4e <HAL_RCC_OscConfig+0x82>
 8000b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b88:	602b      	str	r3, [r5, #0]
 8000b8a:	682b      	ldr	r3, [r5, #0]
 8000b8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b90:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b92:	2a00      	cmp	r2, #0
 8000b94:	d1db      	bne.n	8000b4e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000b96:	f7ff fd07 	bl	80005a8 <HAL_GetTick>
 8000b9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	039b      	lsls	r3, r3, #14
 8000ba0:	d59a      	bpl.n	8000ad8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ba2:	f7ff fd01 	bl	80005a8 <HAL_GetTick>
 8000ba6:	1b80      	subs	r0, r0, r6
 8000ba8:	2864      	cmp	r0, #100	; 0x64
 8000baa:	d9f7      	bls.n	8000b9c <HAL_RCC_OscConfig+0xd0>
 8000bac:	e7db      	b.n	8000b66 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000bae:	4b6a      	ldr	r3, [pc, #424]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	f012 0f0c 	tst.w	r2, #12
 8000bb6:	d010      	beq.n	8000bda <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000bbe:	2a08      	cmp	r2, #8
 8000bc0:	d102      	bne.n	8000bc8 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	025f      	lsls	r7, r3, #9
 8000bc6:	d508      	bpl.n	8000bda <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bc8:	4a63      	ldr	r2, [pc, #396]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
 8000bca:	6893      	ldr	r3, [r2, #8]
 8000bcc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000bd0:	2b0c      	cmp	r3, #12
 8000bd2:	d111      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bd4:	6853      	ldr	r3, [r2, #4]
 8000bd6:	025e      	lsls	r6, r3, #9
 8000bd8:	d40e      	bmi.n	8000bf8 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bda:	4b5f      	ldr	r3, [pc, #380]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	0795      	lsls	r5, r2, #30
 8000be0:	d502      	bpl.n	8000be8 <HAL_RCC_OscConfig+0x11c>
 8000be2:	68e2      	ldr	r2, [r4, #12]
 8000be4:	2a01      	cmp	r2, #1
 8000be6:	d1a6      	bne.n	8000b36 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	6921      	ldr	r1, [r4, #16]
 8000bec:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000bf0:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000bf4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bf6:	e772      	b.n	8000ade <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bf8:	68e2      	ldr	r2, [r4, #12]
 8000bfa:	4b58      	ldr	r3, [pc, #352]	; (8000d5c <HAL_RCC_OscConfig+0x290>)
 8000bfc:	b1b2      	cbz	r2, 8000c2c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c02:	f7ff fcd1 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c06:	4d54      	ldr	r5, [pc, #336]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000c08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0a:	682b      	ldr	r3, [r5, #0]
 8000c0c:	0798      	lsls	r0, r3, #30
 8000c0e:	d507      	bpl.n	8000c20 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c10:	682b      	ldr	r3, [r5, #0]
 8000c12:	6922      	ldr	r2, [r4, #16]
 8000c14:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c18:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c1c:	602b      	str	r3, [r5, #0]
 8000c1e:	e75e      	b.n	8000ade <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c20:	f7ff fcc2 	bl	80005a8 <HAL_GetTick>
 8000c24:	1b80      	subs	r0, r0, r6
 8000c26:	2802      	cmp	r0, #2
 8000c28:	d9ef      	bls.n	8000c0a <HAL_RCC_OscConfig+0x13e>
 8000c2a:	e79c      	b.n	8000b66 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000c2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c2e:	f7ff fcbb 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c32:	4d49      	ldr	r5, [pc, #292]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000c34:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c36:	682b      	ldr	r3, [r5, #0]
 8000c38:	0799      	lsls	r1, r3, #30
 8000c3a:	f57f af50 	bpl.w	8000ade <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c3e:	f7ff fcb3 	bl	80005a8 <HAL_GetTick>
 8000c42:	1b80      	subs	r0, r0, r6
 8000c44:	2802      	cmp	r0, #2
 8000c46:	d9f6      	bls.n	8000c36 <HAL_RCC_OscConfig+0x16a>
 8000c48:	e78d      	b.n	8000b66 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c4a:	6962      	ldr	r2, [r4, #20]
 8000c4c:	4b44      	ldr	r3, [pc, #272]	; (8000d60 <HAL_RCC_OscConfig+0x294>)
 8000c4e:	b17a      	cbz	r2, 8000c70 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000c50:	2201      	movs	r2, #1
 8000c52:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c54:	f7ff fca8 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c58:	4d3f      	ldr	r5, [pc, #252]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000c5a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c5c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c5e:	079f      	lsls	r7, r3, #30
 8000c60:	f53f af41 	bmi.w	8000ae6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c64:	f7ff fca0 	bl	80005a8 <HAL_GetTick>
 8000c68:	1b80      	subs	r0, r0, r6
 8000c6a:	2802      	cmp	r0, #2
 8000c6c:	d9f6      	bls.n	8000c5c <HAL_RCC_OscConfig+0x190>
 8000c6e:	e77a      	b.n	8000b66 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000c70:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c72:	f7ff fc99 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c76:	4d38      	ldr	r5, [pc, #224]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000c78:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c7a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c7c:	0798      	lsls	r0, r3, #30
 8000c7e:	f57f af32 	bpl.w	8000ae6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c82:	f7ff fc91 	bl	80005a8 <HAL_GetTick>
 8000c86:	1b80      	subs	r0, r0, r6
 8000c88:	2802      	cmp	r0, #2
 8000c8a:	d9f6      	bls.n	8000c7a <HAL_RCC_OscConfig+0x1ae>
 8000c8c:	e76b      	b.n	8000b66 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c8e:	4b32      	ldr	r3, [pc, #200]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
 8000c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c92:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000c96:	d128      	bne.n	8000cea <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c98:	9201      	str	r2, [sp, #4]
 8000c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ca0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000cac:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cae:	4d2d      	ldr	r5, [pc, #180]	; (8000d64 <HAL_RCC_OscConfig+0x298>)
 8000cb0:	682b      	ldr	r3, [r5, #0]
 8000cb2:	05d9      	lsls	r1, r3, #23
 8000cb4:	d51b      	bpl.n	8000cee <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cb6:	68a3      	ldr	r3, [r4, #8]
 8000cb8:	4d27      	ldr	r5, [pc, #156]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d127      	bne.n	8000d0e <HAL_RCC_OscConfig+0x242>
 8000cbe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000cc6:	f7ff fc6f 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cca:	4d23      	ldr	r5, [pc, #140]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000ccc:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cce:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cd2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cd4:	079b      	lsls	r3, r3, #30
 8000cd6:	d539      	bpl.n	8000d4c <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	f43f af08 	beq.w	8000aee <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cde:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <HAL_RCC_OscConfig+0x28c>)
 8000ce0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	e701      	b.n	8000aee <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000cea:	2600      	movs	r6, #0
 8000cec:	e7df      	b.n	8000cae <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cee:	682b      	ldr	r3, [r5, #0]
 8000cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000cf6:	f7ff fc57 	bl	80005a8 <HAL_GetTick>
 8000cfa:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cfc:	682b      	ldr	r3, [r5, #0]
 8000cfe:	05da      	lsls	r2, r3, #23
 8000d00:	d4d9      	bmi.n	8000cb6 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d02:	f7ff fc51 	bl	80005a8 <HAL_GetTick>
 8000d06:	1bc0      	subs	r0, r0, r7
 8000d08:	2802      	cmp	r0, #2
 8000d0a:	d9f7      	bls.n	8000cfc <HAL_RCC_OscConfig+0x230>
 8000d0c:	e72b      	b.n	8000b66 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d0e:	2b05      	cmp	r3, #5
 8000d10:	d104      	bne.n	8000d1c <HAL_RCC_OscConfig+0x250>
 8000d12:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d14:	f043 0304 	orr.w	r3, r3, #4
 8000d18:	672b      	str	r3, [r5, #112]	; 0x70
 8000d1a:	e7d0      	b.n	8000cbe <HAL_RCC_OscConfig+0x1f2>
 8000d1c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d1e:	f022 0201 	bic.w	r2, r2, #1
 8000d22:	672a      	str	r2, [r5, #112]	; 0x70
 8000d24:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d26:	f022 0204 	bic.w	r2, r2, #4
 8000d2a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1ca      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8000d30:	f7ff fc3a 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d34:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d38:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d3a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d3c:	0798      	lsls	r0, r3, #30
 8000d3e:	d5cb      	bpl.n	8000cd8 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d40:	f7ff fc32 	bl	80005a8 <HAL_GetTick>
 8000d44:	1bc0      	subs	r0, r0, r7
 8000d46:	4540      	cmp	r0, r8
 8000d48:	d9f7      	bls.n	8000d3a <HAL_RCC_OscConfig+0x26e>
 8000d4a:	e70c      	b.n	8000b66 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d4c:	f7ff fc2c 	bl	80005a8 <HAL_GetTick>
 8000d50:	1bc0      	subs	r0, r0, r7
 8000d52:	4540      	cmp	r0, r8
 8000d54:	d9bd      	bls.n	8000cd2 <HAL_RCC_OscConfig+0x206>
 8000d56:	e706      	b.n	8000b66 <HAL_RCC_OscConfig+0x9a>
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	42470000 	.word	0x42470000
 8000d60:	42470e80 	.word	0x42470e80
 8000d64:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d68:	4d23      	ldr	r5, [pc, #140]	; (8000df8 <HAL_RCC_OscConfig+0x32c>)
 8000d6a:	68ab      	ldr	r3, [r5, #8]
 8000d6c:	f003 030c 	and.w	r3, r3, #12
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	f43f aee0 	beq.w	8000b36 <HAL_RCC_OscConfig+0x6a>
 8000d76:	4e21      	ldr	r6, [pc, #132]	; (8000dfc <HAL_RCC_OscConfig+0x330>)
 8000d78:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d7a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000d7c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d7e:	d12d      	bne.n	8000ddc <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8000d80:	f7ff fc12 	bl	80005a8 <HAL_GetTick>
 8000d84:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d86:	682b      	ldr	r3, [r5, #0]
 8000d88:	0199      	lsls	r1, r3, #6
 8000d8a:	d421      	bmi.n	8000dd0 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d8c:	6a22      	ldr	r2, [r4, #32]
 8000d8e:	69e3      	ldr	r3, [r4, #28]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d94:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d9a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d9e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000da0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000da4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da6:	4c14      	ldr	r4, [pc, #80]	; (8000df8 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000da8:	0852      	lsrs	r2, r2, #1
 8000daa:	3a01      	subs	r2, #1
 8000dac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000db2:	2301      	movs	r3, #1
 8000db4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000db6:	f7ff fbf7 	bl	80005a8 <HAL_GetTick>
 8000dba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	019a      	lsls	r2, r3, #6
 8000dc0:	f53f ae99 	bmi.w	8000af6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc4:	f7ff fbf0 	bl	80005a8 <HAL_GetTick>
 8000dc8:	1b40      	subs	r0, r0, r5
 8000dca:	2802      	cmp	r0, #2
 8000dcc:	d9f6      	bls.n	8000dbc <HAL_RCC_OscConfig+0x2f0>
 8000dce:	e6ca      	b.n	8000b66 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dd0:	f7ff fbea 	bl	80005a8 <HAL_GetTick>
 8000dd4:	1bc0      	subs	r0, r0, r7
 8000dd6:	2802      	cmp	r0, #2
 8000dd8:	d9d5      	bls.n	8000d86 <HAL_RCC_OscConfig+0x2ba>
 8000dda:	e6c4      	b.n	8000b66 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8000ddc:	f7ff fbe4 	bl	80005a8 <HAL_GetTick>
 8000de0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000de2:	682b      	ldr	r3, [r5, #0]
 8000de4:	019b      	lsls	r3, r3, #6
 8000de6:	f57f ae86 	bpl.w	8000af6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dea:	f7ff fbdd 	bl	80005a8 <HAL_GetTick>
 8000dee:	1b00      	subs	r0, r0, r4
 8000df0:	2802      	cmp	r0, #2
 8000df2:	d9f6      	bls.n	8000de2 <HAL_RCC_OscConfig+0x316>
 8000df4:	e6b7      	b.n	8000b66 <HAL_RCC_OscConfig+0x9a>
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	42470060 	.word	0x42470060

08000e00 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e00:	6a03      	ldr	r3, [r0, #32]
 8000e02:	f023 0301 	bic.w	r3, r3, #1
 8000e06:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e08:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e0a:	6842      	ldr	r2, [r0, #4]
{
 8000e0c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000e0e:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e12:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e16:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000e18:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000e1a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000e1e:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e20:	4c0c      	ldr	r4, [pc, #48]	; (8000e54 <TIM_OC1_SetConfig+0x54>)
 8000e22:	42a0      	cmp	r0, r4
 8000e24:	d009      	beq.n	8000e3a <TIM_OC1_SetConfig+0x3a>
 8000e26:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e2a:	42a0      	cmp	r0, r4
 8000e2c:	d005      	beq.n	8000e3a <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e2e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000e30:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000e32:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000e34:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000e36:	6203      	str	r3, [r0, #32]
} 
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8000e3a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e3c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000e3e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000e42:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e44:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000e46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e4a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8000e4c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e50:	4322      	orrs	r2, r4
 8000e52:	e7ec      	b.n	8000e2e <TIM_OC1_SetConfig+0x2e>
 8000e54:	40010000 	.word	0x40010000

08000e58 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000e58:	6a03      	ldr	r3, [r0, #32]
 8000e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e5e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e60:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000e62:	6842      	ldr	r2, [r0, #4]
{
 8000e64:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000e66:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e68:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000e6a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e6e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e70:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000e72:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e76:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000e7a:	4c0e      	ldr	r4, [pc, #56]	; (8000eb4 <TIM_OC3_SetConfig+0x5c>)
 8000e7c:	42a0      	cmp	r0, r4
 8000e7e:	d009      	beq.n	8000e94 <TIM_OC3_SetConfig+0x3c>
 8000e80:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000e84:	42a0      	cmp	r0, r4
 8000e86:	d005      	beq.n	8000e94 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e88:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000e8a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000e8c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000e8e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e90:	6203      	str	r3, [r0, #32]
}
 8000e92:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e94:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000e96:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000e98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000e9c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000ea0:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000ea2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000ea6:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8000ea8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000eac:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8000eb0:	e7ea      	b.n	8000e88 <TIM_OC3_SetConfig+0x30>
 8000eb2:	bf00      	nop
 8000eb4:	40010000 	.word	0x40010000

08000eb8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000eb8:	6a03      	ldr	r3, [r0, #32]
 8000eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ebe:	6203      	str	r3, [r0, #32]
{
 8000ec0:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ec2:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8000ec4:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000ec6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ec8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000eca:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ece:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000ed2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000ed4:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000ed8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8000edc:	4d09      	ldr	r5, [pc, #36]	; (8000f04 <TIM_OC4_SetConfig+0x4c>)
 8000ede:	42a8      	cmp	r0, r5
 8000ee0:	d009      	beq.n	8000ef6 <TIM_OC4_SetConfig+0x3e>
 8000ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ee6:	42a8      	cmp	r0, r5
 8000ee8:	d005      	beq.n	8000ef6 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000eea:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000eec:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000eee:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000ef0:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ef2:	6204      	str	r4, [r0, #32]
}
 8000ef4:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000ef6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000ef8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000efc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8000f00:	e7f3      	b.n	8000eea <TIM_OC4_SetConfig+0x32>
 8000f02:	bf00      	nop
 8000f04:	40010000 	.word	0x40010000

08000f08 <HAL_TIM_PWM_MspInit>:
 8000f08:	4770      	bx	lr

08000f0a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000f0a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000f0e:	2b01      	cmp	r3, #1
{
 8000f10:	b570      	push	{r4, r5, r6, lr}
 8000f12:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000f16:	d01c      	beq.n	8000f52 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f18:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8000f1c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000f24:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000f26:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000f2a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000f2e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8000f30:	680a      	ldr	r2, [r1, #0]
 8000f32:	2a40      	cmp	r2, #64	; 0x40
 8000f34:	d079      	beq.n	800102a <HAL_TIM_ConfigClockSource+0x120>
 8000f36:	d819      	bhi.n	8000f6c <HAL_TIM_ConfigClockSource+0x62>
 8000f38:	2a10      	cmp	r2, #16
 8000f3a:	f000 8093 	beq.w	8001064 <HAL_TIM_ConfigClockSource+0x15a>
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_TIM_ConfigClockSource+0x4c>
 8000f40:	2a00      	cmp	r2, #0
 8000f42:	f000 8089 	beq.w	8001058 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000f52:	4618      	mov	r0, r3
}
 8000f54:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000f56:	2a20      	cmp	r2, #32
 8000f58:	f000 808a 	beq.w	8001070 <HAL_TIM_ConfigClockSource+0x166>
 8000f5c:	2a30      	cmp	r2, #48	; 0x30
 8000f5e:	d1f2      	bne.n	8000f46 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000f60:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000f66:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000f6a:	e036      	b.n	8000fda <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000f6c:	2a70      	cmp	r2, #112	; 0x70
 8000f6e:	d036      	beq.n	8000fde <HAL_TIM_ConfigClockSource+0xd4>
 8000f70:	d81b      	bhi.n	8000faa <HAL_TIM_ConfigClockSource+0xa0>
 8000f72:	2a50      	cmp	r2, #80	; 0x50
 8000f74:	d042      	beq.n	8000ffc <HAL_TIM_ConfigClockSource+0xf2>
 8000f76:	2a60      	cmp	r2, #96	; 0x60
 8000f78:	d1e5      	bne.n	8000f46 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f7a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000f7c:	684d      	ldr	r5, [r1, #4]
 8000f7e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000f80:	f024 0410 	bic.w	r4, r4, #16
 8000f84:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000f86:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000f88:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000f8a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000f8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000f92:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000f96:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000f9a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000f9c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000f9e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fa0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000fa4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000fa8:	e017      	b.n	8000fda <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000faa:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000fae:	d011      	beq.n	8000fd4 <HAL_TIM_ConfigClockSource+0xca>
 8000fb0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000fb4:	d1c7      	bne.n	8000f46 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fb6:	688a      	ldr	r2, [r1, #8]
 8000fb8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000fba:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fbc:	68c9      	ldr	r1, [r1, #12]
 8000fbe:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fc0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000fc8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000fca:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000fd2:	e002      	b.n	8000fda <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	e7b3      	b.n	8000f46 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fde:	688a      	ldr	r2, [r1, #8]
 8000fe0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000fe2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fe4:	68c9      	ldr	r1, [r1, #12]
 8000fe6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fe8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000fec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000ff0:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000ff2:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000ff4:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000ff6:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000ffa:	e7ee      	b.n	8000fda <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000ffc:	684c      	ldr	r4, [r1, #4]
 8000ffe:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001000:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001002:	6a1d      	ldr	r5, [r3, #32]
 8001004:	f025 0501 	bic.w	r5, r5, #1
 8001008:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800100a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800100c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001010:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001014:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001018:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800101a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800101c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800101e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001020:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001024:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001028:	e7d7      	b.n	8000fda <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800102a:	684c      	ldr	r4, [r1, #4]
 800102c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800102e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001030:	6a1d      	ldr	r5, [r3, #32]
 8001032:	f025 0501 	bic.w	r5, r5, #1
 8001036:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001038:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800103a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800103e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001042:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001046:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001048:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800104a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800104c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800104e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001052:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001056:	e7c0      	b.n	8000fda <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001058:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800105a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800105e:	f042 0207 	orr.w	r2, r2, #7
 8001062:	e7ba      	b.n	8000fda <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001064:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001066:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800106a:	f042 0217 	orr.w	r2, r2, #23
 800106e:	e7b4      	b.n	8000fda <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001070:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001072:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001076:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 800107a:	e7ae      	b.n	8000fda <HAL_TIM_ConfigClockSource+0xd0>

0800107c <HAL_TIM_PeriodElapsedCallback>:
 800107c:	4770      	bx	lr

0800107e <HAL_TIM_OC_DelayElapsedCallback>:
 800107e:	4770      	bx	lr

08001080 <HAL_TIM_IC_CaptureCallback>:
 8001080:	4770      	bx	lr

08001082 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001082:	4770      	bx	lr

08001084 <HAL_TIM_TriggerCallback>:
 8001084:	4770      	bx	lr

08001086 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001086:	6803      	ldr	r3, [r0, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	0791      	lsls	r1, r2, #30
{
 800108c:	b510      	push	{r4, lr}
 800108e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001090:	d50e      	bpl.n	80010b0 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001092:	68da      	ldr	r2, [r3, #12]
 8001094:	0792      	lsls	r2, r2, #30
 8001096:	d50b      	bpl.n	80010b0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001098:	f06f 0202 	mvn.w	r2, #2
 800109c:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800109e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010a0:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010a2:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010a4:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010a6:	d077      	beq.n	8001198 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80010a8:	f7ff ffea 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010ac:	2300      	movs	r3, #0
 80010ae:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	691a      	ldr	r2, [r3, #16]
 80010b4:	0750      	lsls	r0, r2, #29
 80010b6:	d510      	bpl.n	80010da <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	0751      	lsls	r1, r2, #29
 80010bc:	d50d      	bpl.n	80010da <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010be:	f06f 0204 	mvn.w	r2, #4
 80010c2:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010c4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010c6:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010c8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010cc:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80010ce:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010d0:	d068      	beq.n	80011a4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80010d2:	f7ff ffd5 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010d6:	2300      	movs	r3, #0
 80010d8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	691a      	ldr	r2, [r3, #16]
 80010de:	0712      	lsls	r2, r2, #28
 80010e0:	d50f      	bpl.n	8001102 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	0710      	lsls	r0, r2, #28
 80010e6:	d50c      	bpl.n	8001102 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010e8:	f06f 0208 	mvn.w	r2, #8
 80010ec:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010ee:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010f0:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010f2:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010f4:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80010f6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010f8:	d05a      	beq.n	80011b0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80010fa:	f7ff ffc1 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010fe:	2300      	movs	r3, #0
 8001100:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	06d2      	lsls	r2, r2, #27
 8001108:	d510      	bpl.n	800112c <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	06d0      	lsls	r0, r2, #27
 800110e:	d50d      	bpl.n	800112c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001110:	f06f 0210 	mvn.w	r2, #16
 8001114:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001116:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001118:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800111a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800111e:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001120:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001122:	d04b      	beq.n	80011bc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001124:	f7ff ffac 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001128:	2300      	movs	r3, #0
 800112a:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800112c:	6823      	ldr	r3, [r4, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	07d1      	lsls	r1, r2, #31
 8001132:	d508      	bpl.n	8001146 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	07d2      	lsls	r2, r2, #31
 8001138:	d505      	bpl.n	8001146 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800113a:	f06f 0201 	mvn.w	r2, #1
 800113e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001140:	4620      	mov	r0, r4
 8001142:	f7ff ff9b 	bl	800107c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	691a      	ldr	r2, [r3, #16]
 800114a:	0610      	lsls	r0, r2, #24
 800114c:	d508      	bpl.n	8001160 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	0611      	lsls	r1, r2, #24
 8001152:	d505      	bpl.n	8001160 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001158:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800115a:	4620      	mov	r0, r4
 800115c:	f000 f9a9 	bl	80014b2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	0652      	lsls	r2, r2, #25
 8001166:	d508      	bpl.n	800117a <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	0650      	lsls	r0, r2, #25
 800116c:	d505      	bpl.n	800117a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800116e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001172:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001174:	4620      	mov	r0, r4
 8001176:	f7ff ff85 	bl	8001084 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800117a:	6823      	ldr	r3, [r4, #0]
 800117c:	691a      	ldr	r2, [r3, #16]
 800117e:	0691      	lsls	r1, r2, #26
 8001180:	d522      	bpl.n	80011c8 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	0692      	lsls	r2, r2, #26
 8001186:	d51f      	bpl.n	80011c8 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001188:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800118c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800118e:	611a      	str	r2, [r3, #16]
}
 8001190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001194:	f000 b98c 	b.w	80014b0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001198:	f7ff ff71 	bl	800107e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800119c:	4620      	mov	r0, r4
 800119e:	f7ff ff70 	bl	8001082 <HAL_TIM_PWM_PulseFinishedCallback>
 80011a2:	e783      	b.n	80010ac <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011a4:	f7ff ff6b 	bl	800107e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff ff6a 	bl	8001082 <HAL_TIM_PWM_PulseFinishedCallback>
 80011ae:	e792      	b.n	80010d6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011b0:	f7ff ff65 	bl	800107e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff ff64 	bl	8001082 <HAL_TIM_PWM_PulseFinishedCallback>
 80011ba:	e7a0      	b.n	80010fe <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011bc:	f7ff ff5f 	bl	800107e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011c0:	4620      	mov	r0, r4
 80011c2:	f7ff ff5e 	bl	8001082 <HAL_TIM_PWM_PulseFinishedCallback>
 80011c6:	e7af      	b.n	8001128 <HAL_TIM_IRQHandler+0xa2>
 80011c8:	bd10      	pop	{r4, pc}
	...

080011cc <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80011cc:	4a2e      	ldr	r2, [pc, #184]	; (8001288 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80011ce:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80011d0:	4290      	cmp	r0, r2
 80011d2:	d012      	beq.n	80011fa <TIM_Base_SetConfig+0x2e>
 80011d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011d8:	d00f      	beq.n	80011fa <TIM_Base_SetConfig+0x2e>
 80011da:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80011de:	4290      	cmp	r0, r2
 80011e0:	d00b      	beq.n	80011fa <TIM_Base_SetConfig+0x2e>
 80011e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011e6:	4290      	cmp	r0, r2
 80011e8:	d007      	beq.n	80011fa <TIM_Base_SetConfig+0x2e>
 80011ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011ee:	4290      	cmp	r0, r2
 80011f0:	d003      	beq.n	80011fa <TIM_Base_SetConfig+0x2e>
 80011f2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80011f6:	4290      	cmp	r0, r2
 80011f8:	d11d      	bne.n	8001236 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80011fa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001200:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001202:	4a21      	ldr	r2, [pc, #132]	; (8001288 <TIM_Base_SetConfig+0xbc>)
 8001204:	4290      	cmp	r0, r2
 8001206:	d104      	bne.n	8001212 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001208:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800120a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800120e:	4313      	orrs	r3, r2
 8001210:	e028      	b.n	8001264 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001212:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001216:	d0f7      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 8001218:	4a1c      	ldr	r2, [pc, #112]	; (800128c <TIM_Base_SetConfig+0xc0>)
 800121a:	4290      	cmp	r0, r2
 800121c:	d0f4      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 800121e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001222:	4290      	cmp	r0, r2
 8001224:	d0f0      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 8001226:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800122a:	4290      	cmp	r0, r2
 800122c:	d0ec      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 800122e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001232:	4290      	cmp	r0, r2
 8001234:	d0e8      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 8001236:	4a16      	ldr	r2, [pc, #88]	; (8001290 <TIM_Base_SetConfig+0xc4>)
 8001238:	4290      	cmp	r0, r2
 800123a:	d0e5      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 800123c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001240:	4290      	cmp	r0, r2
 8001242:	d0e1      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 8001244:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001248:	4290      	cmp	r0, r2
 800124a:	d0dd      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 800124c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001250:	4290      	cmp	r0, r2
 8001252:	d0d9      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 8001254:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001258:	4290      	cmp	r0, r2
 800125a:	d0d5      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
 800125c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001260:	4290      	cmp	r0, r2
 8001262:	d0d1      	beq.n	8001208 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001264:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001266:	688b      	ldr	r3, [r1, #8]
 8001268:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800126a:	680b      	ldr	r3, [r1, #0]
 800126c:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <TIM_Base_SetConfig+0xbc>)
 8001270:	4298      	cmp	r0, r3
 8001272:	d006      	beq.n	8001282 <TIM_Base_SetConfig+0xb6>
 8001274:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001278:	4298      	cmp	r0, r3
 800127a:	d002      	beq.n	8001282 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 800127c:	2301      	movs	r3, #1
 800127e:	6143      	str	r3, [r0, #20]
}
 8001280:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001282:	690b      	ldr	r3, [r1, #16]
 8001284:	6303      	str	r3, [r0, #48]	; 0x30
 8001286:	e7f9      	b.n	800127c <TIM_Base_SetConfig+0xb0>
 8001288:	40010000 	.word	0x40010000
 800128c:	40000400 	.word	0x40000400
 8001290:	40014000 	.word	0x40014000

08001294 <HAL_TIM_Base_Init>:
{ 
 8001294:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001296:	4604      	mov	r4, r0
 8001298:	b1a0      	cbz	r0, 80012c4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800129a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800129e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012a2:	b91b      	cbnz	r3, 80012ac <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80012a4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80012a8:	f000 fa1c 	bl	80016e4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80012ac:	2302      	movs	r3, #2
 80012ae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80012b2:	6820      	ldr	r0, [r4, #0]
 80012b4:	1d21      	adds	r1, r4, #4
 80012b6:	f7ff ff89 	bl	80011cc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80012c0:	2000      	movs	r0, #0
 80012c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012c4:	2001      	movs	r0, #1
}
 80012c6:	bd10      	pop	{r4, pc}

080012c8 <HAL_TIM_PWM_Init>:
{
 80012c8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80012ca:	4604      	mov	r4, r0
 80012cc:	b1a0      	cbz	r0, 80012f8 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80012ce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012d2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012d6:	b91b      	cbnz	r3, 80012e0 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80012d8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80012dc:	f7ff fe14 	bl	8000f08 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80012e0:	2302      	movs	r3, #2
 80012e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80012e6:	6820      	ldr	r0, [r4, #0]
 80012e8:	1d21      	adds	r1, r4, #4
 80012ea:	f7ff ff6f 	bl	80011cc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80012f4:	2000      	movs	r0, #0
 80012f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012f8:	2001      	movs	r0, #1
}  
 80012fa:	bd10      	pop	{r4, pc}

080012fc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012fc:	6a03      	ldr	r3, [r0, #32]
 80012fe:	f023 0310 	bic.w	r3, r3, #16
 8001302:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001304:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001306:	6842      	ldr	r2, [r0, #4]
{
 8001308:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800130a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800130c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800130e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001312:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001316:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001318:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800131c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001320:	4c0d      	ldr	r4, [pc, #52]	; (8001358 <TIM_OC2_SetConfig+0x5c>)
 8001322:	42a0      	cmp	r0, r4
 8001324:	d009      	beq.n	800133a <TIM_OC2_SetConfig+0x3e>
 8001326:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800132a:	42a0      	cmp	r0, r4
 800132c:	d005      	beq.n	800133a <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800132e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001330:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001332:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001334:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001336:	6203      	str	r3, [r0, #32]
}
 8001338:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800133a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800133c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800133e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001342:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001346:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001348:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800134c:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800134e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001352:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8001356:	e7ea      	b.n	800132e <TIM_OC2_SetConfig+0x32>
 8001358:	40010000 	.word	0x40010000

0800135c <HAL_TIM_PWM_ConfigChannel>:
{
 800135c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800135e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001362:	2b01      	cmp	r3, #1
{
 8001364:	4604      	mov	r4, r0
 8001366:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800136a:	d025      	beq.n	80013b8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800136c:	2301      	movs	r3, #1
 800136e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001372:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 8001376:	2a0c      	cmp	r2, #12
 8001378:	d818      	bhi.n	80013ac <HAL_TIM_PWM_ConfigChannel+0x50>
 800137a:	e8df f002 	tbb	[pc, r2]
 800137e:	1707      	.short	0x1707
 8001380:	171e1717 	.word	0x171e1717
 8001384:	172f1717 	.word	0x172f1717
 8001388:	1717      	.short	0x1717
 800138a:	40          	.byte	0x40
 800138b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800138c:	6820      	ldr	r0, [r4, #0]
 800138e:	f7ff fd37 	bl	8000e00 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001392:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001394:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001396:	699a      	ldr	r2, [r3, #24]
 8001398:	f042 0208 	orr.w	r2, r2, #8
 800139c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	f022 0204 	bic.w	r2, r2, #4
 80013a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013a6:	699a      	ldr	r2, [r3, #24]
 80013a8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013aa:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80013ac:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80013ae:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80013b4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80013b8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80013ba:	6820      	ldr	r0, [r4, #0]
 80013bc:	f7ff ff9e 	bl	80012fc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013d4:	699a      	ldr	r2, [r3, #24]
 80013d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013da:	e7e6      	b.n	80013aa <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80013dc:	6820      	ldr	r0, [r4, #0]
 80013de:	f7ff fd3b 	bl	8000e58 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013e2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80013e4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80013e6:	69da      	ldr	r2, [r3, #28]
 80013e8:	f042 0208 	orr.w	r2, r2, #8
 80013ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80013ee:	69da      	ldr	r2, [r3, #28]
 80013f0:	f022 0204 	bic.w	r2, r2, #4
 80013f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80013f6:	69da      	ldr	r2, [r3, #28]
 80013f8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80013fa:	61da      	str	r2, [r3, #28]
    break;
 80013fc:	e7d6      	b.n	80013ac <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80013fe:	6820      	ldr	r0, [r4, #0]
 8001400:	f7ff fd5a 	bl	8000eb8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001404:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001406:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001408:	69da      	ldr	r2, [r3, #28]
 800140a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800140e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001410:	69da      	ldr	r2, [r3, #28]
 8001412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001416:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001418:	69da      	ldr	r2, [r3, #28]
 800141a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800141e:	e7ec      	b.n	80013fa <HAL_TIM_PWM_ConfigChannel+0x9e>

08001420 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001420:	6a03      	ldr	r3, [r0, #32]
{
 8001422:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001424:	2401      	movs	r4, #1
 8001426:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001428:	ea23 0304 	bic.w	r3, r3, r4
 800142c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 800142e:	6a03      	ldr	r3, [r0, #32]
 8001430:	408a      	lsls	r2, r1
 8001432:	431a      	orrs	r2, r3
 8001434:	6202      	str	r2, [r0, #32]
 8001436:	bd10      	pop	{r4, pc}

08001438 <HAL_TIM_PWM_Start>:
{
 8001438:	b510      	push	{r4, lr}
 800143a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800143c:	2201      	movs	r2, #1
 800143e:	6800      	ldr	r0, [r0, #0]
 8001440:	f7ff ffee 	bl	8001420 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	4a08      	ldr	r2, [pc, #32]	; (8001468 <HAL_TIM_PWM_Start+0x30>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d003      	beq.n	8001454 <HAL_TIM_PWM_Start+0x1c>
 800144c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001450:	4293      	cmp	r3, r2
 8001452:	d103      	bne.n	800145c <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001456:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800145a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]
} 
 8001464:	2000      	movs	r0, #0
 8001466:	bd10      	pop	{r4, pc}
 8001468:	40010000 	.word	0x40010000

0800146c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800146c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001470:	2b01      	cmp	r3, #1
{
 8001472:	b510      	push	{r4, lr}
 8001474:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001478:	d018      	beq.n	80014ac <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800147a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800147e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001480:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001482:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001484:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001486:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800148a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4322      	orrs	r2, r4
 8001490:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001498:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	430a      	orrs	r2, r1
 800149e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80014a6:	2300      	movs	r3, #0
 80014a8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80014ac:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80014ae:	bd10      	pop	{r4, pc}

080014b0 <HAL_TIMEx_CommutationCallback>:
 80014b0:	4770      	bx	lr

080014b2 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80014b2:	4770      	bx	lr

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b530      	push	{r4, r5, lr}
 80014b6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b8:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <SystemClock_Config+0xb0>)
 80014ba:	2100      	movs	r1, #0
 80014bc:	9100      	str	r1, [sp, #0]
 80014be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <SystemClock_Config+0xb4>)
 80014d2:	9101      	str	r1, [sp, #4]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e6:	2301      	movs	r3, #1
 80014e8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ee:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014f8:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 80014fa:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fc:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fe:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001500:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001502:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001504:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001506:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001508:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150a:	f7ff fadf 	bl	8000acc <HAL_RCC_OscConfig>
 800150e:	b100      	cbz	r0, 8001512 <SystemClock_Config+0x5e>
 8001510:	e7fe      	b.n	8001510 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001512:	f7ff f9b7 	bl	8000884 <HAL_PWREx_EnableOverDrive>
 8001516:	b100      	cbz	r0, 800151a <SystemClock_Config+0x66>
 8001518:	e7fe      	b.n	8001518 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	230f      	movs	r3, #15
 800151c:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800151e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001522:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001524:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001526:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800152c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152e:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001530:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001532:	f7ff f9e3 	bl	80008fc <HAL_RCC_ClockConfig>
 8001536:	4604      	mov	r4, r0
 8001538:	b100      	cbz	r0, 800153c <SystemClock_Config+0x88>
 800153a:	e7fe      	b.n	800153a <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800153c:	f7ff fa78 	bl	8000a30 <HAL_RCC_GetHCLKFreq>
 8001540:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001544:	fbb0 f0f3 	udiv	r0, r0, r3
 8001548:	f7ff f89a 	bl	8000680 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800154c:	4628      	mov	r0, r5
 800154e:	f7ff f8ad 	bl	80006ac <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001552:	4622      	mov	r2, r4
 8001554:	4621      	mov	r1, r4
 8001556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800155a:	f7ff f851 	bl	8000600 <HAL_NVIC_SetPriority>
}
 800155e:	b015      	add	sp, #84	; 0x54
 8001560:	bd30      	pop	{r4, r5, pc}
 8001562:	bf00      	nop
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000

0800156c <main>:
{
 800156c:	b500      	push	{lr}
 800156e:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8001570:	f7fe fff4 	bl	800055c <HAL_Init>
  SystemClock_Config();
 8001574:	f7ff ff9e 	bl	80014b4 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001578:	4b34      	ldr	r3, [pc, #208]	; (800164c <main+0xe0>)
  htim2.Instance = TIM2;
 800157a:	4c35      	ldr	r4, [pc, #212]	; (8001650 <main+0xe4>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800157c:	2200      	movs	r2, #0
 800157e:	9201      	str	r2, [sp, #4]
 8001580:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001582:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001586:	6319      	str	r1, [r3, #48]	; 0x30
 8001588:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800158a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800158e:	9101      	str	r1, [sp, #4]
 8001590:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	9202      	str	r2, [sp, #8]
 8001594:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001596:	f041 0101 	orr.w	r1, r1, #1
 800159a:	6319      	str	r1, [r3, #48]	; 0x30
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	60a2      	str	r2, [r4, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	9302      	str	r3, [sp, #8]
 80015a6:	9b02      	ldr	r3, [sp, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a8:	6122      	str	r2, [r4, #16]
  htim2.Init.Prescaler = 900-1;
 80015aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015ae:	f240 3383 	movw	r3, #899	; 0x383
 80015b2:	e884 000a 	stmia.w	r4, {r1, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b6:	4620      	mov	r0, r4
  htim2.Init.Period = 1000-1;
 80015b8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80015bc:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015be:	f7ff fe69 	bl	8001294 <HAL_TIM_Base_Init>
 80015c2:	4625      	mov	r5, r4
 80015c4:	b100      	cbz	r0, 80015c8 <main+0x5c>
 80015c6:	e7fe      	b.n	80015c6 <main+0x5a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c8:	a910      	add	r1, sp, #64	; 0x40
 80015ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ce:	f841 3d2c 	str.w	r3, [r1, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015d2:	4620      	mov	r0, r4
 80015d4:	f7ff fc99 	bl	8000f0a <HAL_TIM_ConfigClockSource>
 80015d8:	b100      	cbz	r0, 80015dc <main+0x70>
 80015da:	e7fe      	b.n	80015da <main+0x6e>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015dc:	4620      	mov	r0, r4
 80015de:	f7ff fe73 	bl	80012c8 <HAL_TIM_PWM_Init>
 80015e2:	b100      	cbz	r0, 80015e6 <main+0x7a>
 80015e4:	e7fe      	b.n	80015e4 <main+0x78>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e6:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ea:	a903      	add	r1, sp, #12
 80015ec:	4620      	mov	r0, r4
 80015ee:	f7ff ff3d 	bl	800146c <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4602      	mov	r2, r0
 80015f4:	b100      	cbz	r0, 80015f8 <main+0x8c>
 80015f6:	e7fe      	b.n	80015f6 <main+0x8a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f8:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80015fa:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fc:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015fe:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001600:	a909      	add	r1, sp, #36	; 0x24
 8001602:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001604:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001606:	f7ff fea9 	bl	800135c <HAL_TIM_PWM_ConfigChannel>
 800160a:	4604      	mov	r4, r0
 800160c:	b100      	cbz	r0, 8001610 <main+0xa4>
 800160e:	e7fe      	b.n	800160e <main+0xa2>
  HAL_TIM_MspPostInit(&htim2);
 8001610:	4628      	mov	r0, r5
 8001612:	f000 f883 	bl	800171c <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001616:	4621      	mov	r1, r4
 8001618:	4628      	mov	r0, r5
 800161a:	f7ff ff0d 	bl	8001438 <HAL_TIM_PWM_Start>
	  htim2.Instance->CCR1 = 23;  // duty cycle is .5 ms
 800161e:	2617      	movs	r6, #23
	  htim2.Instance->CCR1 = 69;  // duty cycle is 1.5 ms
 8001620:	2445      	movs	r4, #69	; 0x45
	  htim2.Instance->CCR1 = 23;  // duty cycle is .5 ms
 8001622:	682b      	ldr	r3, [r5, #0]
	  HAL_Delay(2000);
 8001624:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
	  htim2.Instance->CCR1 = 23;  // duty cycle is .5 ms
 8001628:	635e      	str	r6, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 800162a:	f7fe ffc3 	bl	80005b4 <HAL_Delay>
	  htim2.Instance->CCR1 = 69;  // duty cycle is 1.5 ms
 800162e:	682b      	ldr	r3, [r5, #0]
	  HAL_Delay(2000);
 8001630:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
	  htim2.Instance->CCR1 = 69;  // duty cycle is 1.5 ms
 8001634:	635c      	str	r4, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 8001636:	f7fe ffbd 	bl	80005b4 <HAL_Delay>
	  htim2.Instance->CCR1 = 116;  // duty cycle is 2.5 ms
 800163a:	682b      	ldr	r3, [r5, #0]
 800163c:	2274      	movs	r2, #116	; 0x74
 800163e:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 8001640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001644:	f7fe ffb6 	bl	80005b4 <HAL_Delay>
 8001648:	e7eb      	b.n	8001622 <main+0xb6>
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	2000002c 	.word	0x2000002c

08001654 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_MspInit+0x8c>)
 8001658:	2400      	movs	r4, #0
 800165a:	9400      	str	r4, [sp, #0]
 800165c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800165e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
 8001664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001666:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800166a:	9200      	str	r2, [sp, #0]
 800166c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	9401      	str	r4, [sp, #4]
 8001670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001672:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001680:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	f7fe ffaa 	bl	80005dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001688:	4622      	mov	r2, r4
 800168a:	4621      	mov	r1, r4
 800168c:	f06f 000b 	mvn.w	r0, #11
 8001690:	f7fe ffb6 	bl	8000600 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001694:	4622      	mov	r2, r4
 8001696:	4621      	mov	r1, r4
 8001698:	f06f 000a 	mvn.w	r0, #10
 800169c:	f7fe ffb0 	bl	8000600 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80016a0:	4622      	mov	r2, r4
 80016a2:	4621      	mov	r1, r4
 80016a4:	f06f 0009 	mvn.w	r0, #9
 80016a8:	f7fe ffaa 	bl	8000600 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80016ac:	4622      	mov	r2, r4
 80016ae:	4621      	mov	r1, r4
 80016b0:	f06f 0004 	mvn.w	r0, #4
 80016b4:	f7fe ffa4 	bl	8000600 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80016b8:	4622      	mov	r2, r4
 80016ba:	4621      	mov	r1, r4
 80016bc:	f06f 0003 	mvn.w	r0, #3
 80016c0:	f7fe ff9e 	bl	8000600 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80016c4:	4622      	mov	r2, r4
 80016c6:	4621      	mov	r1, r4
 80016c8:	f06f 0001 	mvn.w	r0, #1
 80016cc:	f7fe ff98 	bl	8000600 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80016d0:	4622      	mov	r2, r4
 80016d2:	4621      	mov	r1, r4
 80016d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016d8:	f7fe ff92 	bl	8000600 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016dc:	b002      	add	sp, #8
 80016de:	bd10      	pop	{r4, pc}
 80016e0:	40023800 	.word	0x40023800

080016e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80016e4:	6803      	ldr	r3, [r0, #0]
 80016e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80016ea:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80016ec:	d113      	bne.n	8001716 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ee:	2200      	movs	r2, #0
 80016f0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80016f4:	9201      	str	r2, [sp, #4]
 80016f6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80016f8:	f041 0101 	orr.w	r1, r1, #1
 80016fc:	6419      	str	r1, [r3, #64]	; 0x40
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	9301      	str	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001706:	201c      	movs	r0, #28
 8001708:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800170a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800170c:	f7fe ff78 	bl	8000600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001710:	201c      	movs	r0, #28
 8001712:	f7fe ffa9 	bl	8000668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001716:	b003      	add	sp, #12
 8001718:	f85d fb04 	ldr.w	pc, [sp], #4

0800171c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800171c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 800171e:	6803      	ldr	r3, [r0, #0]
 8001720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001724:	d10b      	bne.n	800173e <HAL_TIM_MspPostInit+0x22>
  
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001728:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <HAL_TIM_MspPostInit+0x28>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001732:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001736:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001738:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f7fe ffc9 	bl	80006d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800173e:	b007      	add	sp, #28
 8001740:	f85d fb04 	ldr.w	pc, [sp], #4
 8001744:	40020000 	.word	0x40020000

08001748 <NMI_Handler>:
 8001748:	4770      	bx	lr

0800174a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800174a:	e7fe      	b.n	800174a <HardFault_Handler>

0800174c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800174c:	e7fe      	b.n	800174c <MemManage_Handler>

0800174e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800174e:	e7fe      	b.n	800174e <BusFault_Handler>

08001750 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001750:	e7fe      	b.n	8001750 <UsageFault_Handler>

08001752 <SVC_Handler>:
 8001752:	4770      	bx	lr

08001754 <DebugMon_Handler>:
 8001754:	4770      	bx	lr

08001756 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001756:	4770      	bx	lr

08001758 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001758:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f7fe ff19 	bl	8000590 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001762:	f7fe bfb0 	b.w	80006c6 <HAL_SYSTICK_IRQHandler>
	...

08001768 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001768:	4801      	ldr	r0, [pc, #4]	; (8001770 <TIM2_IRQHandler+0x8>)
 800176a:	f7ff bc8c 	b.w	8001086 <HAL_TIM_IRQHandler>
 800176e:	bf00      	nop
 8001770:	2000002c 	.word	0x2000002c

08001774 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001774:	490f      	ldr	r1, [pc, #60]	; (80017b4 <SystemInit+0x40>)
 8001776:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800177a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <SystemInit+0x44>)
 8001784:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001786:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800178e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001796:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800179a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <SystemInit+0x48>)
 800179e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017a6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017a8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017ae:	608b      	str	r3, [r1, #8]
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	e000ed00 	.word	0xe000ed00
 80017b8:	40023800 	.word	0x40023800
 80017bc:	24003010 	.word	0x24003010

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017c6:	e003      	b.n	80017d0 <LoopCopyDataInit>

080017c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017ce:	3104      	adds	r1, #4

080017d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017d0:	480b      	ldr	r0, [pc, #44]	; (8001800 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017d8:	d3f6      	bcc.n	80017c8 <CopyDataInit>
  ldr  r2, =_sbss
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017dc:	e002      	b.n	80017e4 <LoopFillZerobss>

080017de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017e0:	f842 3b04 	str.w	r3, [r2], #4

080017e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017e8:	d3f9      	bcc.n	80017de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ea:	f7ff ffc3 	bl	8001774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f000 f811 	bl	8001814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7ff febb 	bl	800156c <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017fc:	08001894 	.word	0x08001894
  ldr  r0, =_sdata
 8001800:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001804:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001808:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800180c:	20000068 	.word	0x20000068

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <__libc_init_array>:
 8001814:	b570      	push	{r4, r5, r6, lr}
 8001816:	4e0d      	ldr	r6, [pc, #52]	; (800184c <__libc_init_array+0x38>)
 8001818:	4c0d      	ldr	r4, [pc, #52]	; (8001850 <__libc_init_array+0x3c>)
 800181a:	1ba4      	subs	r4, r4, r6
 800181c:	10a4      	asrs	r4, r4, #2
 800181e:	2500      	movs	r5, #0
 8001820:	42a5      	cmp	r5, r4
 8001822:	d109      	bne.n	8001838 <__libc_init_array+0x24>
 8001824:	4e0b      	ldr	r6, [pc, #44]	; (8001854 <__libc_init_array+0x40>)
 8001826:	4c0c      	ldr	r4, [pc, #48]	; (8001858 <__libc_init_array+0x44>)
 8001828:	f000 f818 	bl	800185c <_init>
 800182c:	1ba4      	subs	r4, r4, r6
 800182e:	10a4      	asrs	r4, r4, #2
 8001830:	2500      	movs	r5, #0
 8001832:	42a5      	cmp	r5, r4
 8001834:	d105      	bne.n	8001842 <__libc_init_array+0x2e>
 8001836:	bd70      	pop	{r4, r5, r6, pc}
 8001838:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800183c:	4798      	blx	r3
 800183e:	3501      	adds	r5, #1
 8001840:	e7ee      	b.n	8001820 <__libc_init_array+0xc>
 8001842:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001846:	4798      	blx	r3
 8001848:	3501      	adds	r5, #1
 800184a:	e7f2      	b.n	8001832 <__libc_init_array+0x1e>
 800184c:	0800188c 	.word	0x0800188c
 8001850:	0800188c 	.word	0x0800188c
 8001854:	0800188c 	.word	0x0800188c
 8001858:	08001890 	.word	0x08001890

0800185c <_init>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	bf00      	nop
 8001860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001862:	bc08      	pop	{r3}
 8001864:	469e      	mov	lr, r3
 8001866:	4770      	bx	lr

08001868 <_fini>:
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186a:	bf00      	nop
 800186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186e:	bc08      	pop	{r3}
 8001870:	469e      	mov	lr, r3
 8001872:	4770      	bx	lr
